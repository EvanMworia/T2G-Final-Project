@inject NavigationManager navigationManager
@inject IAuth _authService
@inject IJSRuntime _jsRuntime
@page "/register"

<div class="form-container ">
    <div class="card shadow col-6 form-structure">
        <h2 class="form-title">Sign Up For Our Art </h2><h2 class="gold-colored-text form-title">Gallery</h2>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                @successMessage
                <button class="btn btn-success" @onclick="NavigateToUser">OK</button>
            </div>
        }

        @*  Display Error Msg *@
        @if (errorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        <EditForm Model="newUser" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group p-2">
                <label for="Name">Name</label>

                <InputText class="form-control p-2" id="Name" @bind-Value="newUser.Name" aria-describedby="name" />
            </div>
            <div class="form-group p-2">
                <label for="UserName">UserName</label>

                <InputText class="form-control p-2" id="UserName" @bind-Value="newUser.UserName" aria-describedby="name" />
            </div>
            <div class="form-group p-2">
                <label for="Email">Email</label>

                <InputText class="form-control p-2" id="Email" @bind-Value="newUser.Email" aria-describedby="name" />
            </div>
            <div class="form-group p-2">
                <label for="PhoneNumber">PhoneNumber</label>

                <InputText class="form-control p-2" id="PhoneNumber" @bind-Value="newUser.PhoneNumber" aria-describedby="name" />
            </div>
            <div class="form-group p-2">
                <label for="Role">Role</label>

                <InputText class="form-control p-2" id="Role" @bind-Value="newUser.Role" aria-describedby="name" />
            </div>
            @* <div class="form-group p-2">
                <label for="Password">Password</label>

                <InputText type="@passwordFieldType" class="form-control p-2" id="Password" @bind-Value="newUser.Password" aria-describedby="name" />
            </div> *@
            <div class="form-group p-2">
                <label for="password">Password</label>
                <div class="input-group">
                    <InputText type="@passwordFieldType" class="form-control p-2" id="password" @bind-Value="@newUser.Password" aria-describedby="name" />
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                            @passwordToggleIcon
                        </button>
                    </div>
                </div>
               
            </div>
            <div class=" button-container">
                <button class="form-button">Register</button>
            </div>
        </EditForm>

    </div>
</div>


@code {
    private RegisterRequestDTO newUser = new RegisterRequestDTO();
    private string? successMessage;
    private string? errorMessage;
    private string passwordFieldType = "password";
    private string passwordToggleIcon = "👁️";

    private async Task RegisterUser()
    {
        var res = await _authService.Register(newUser);
        Console.WriteLine("hello");
        Console.WriteLine("IsSuccess" + res.IsSuccess);
        Console.WriteLine("Message" + res.Result);

        if (res.IsSuccess)
        {
            //Set success Message
            successMessage = "Registration Successfull!!";
            //clear any previous error message
            errorMessage = null;

        }
        else
        {
            errorMessage = res.Errormessage;
            successMessage = null;
        }
    }
    private void NavigateToUser()
    {
        navigationManager.NavigateTo("/login");
    }

    private void TogglePasswordVisibility()
    {
        passwordFieldType = (passwordFieldType == "password") ? "text" : "password";
        passwordToggleIcon = (passwordFieldType == "password") ? "👁️" : "👁️‍🗨️";
    }
}