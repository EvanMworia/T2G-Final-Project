@page "/login"

@inject UserStateService _stateService
@inject IAuth authInterface
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authProvider
@inject NavigationManager _navigate
@* inject http client *@

@inject HttpClient _httpClient

<div class="form-container ">
    <div class="card shadow col-6 form-structure" style="height: 60vh">
            <h2 class="form-title">Welcome, Sign In To</h2><h2 class="gold-colored-text form-title">Browse The Gallery</h2>

        <EditForm Model="user" OnValidSubmit="loginUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group p-2">
                <label for="UserName">UserName:</label>

                <InputText class="form-control p-2" id="UserName" @bind-Value="user.UserName" aria-describedby="name" />
            </div>
        
            <div class="form-group p-2">
                <label for="Password">Password:</label>

                <InputText class="form-control p-2" id="Password" @bind-Value="user.Password" aria-describedby="name" />
            </div>

                <div class=" button-container">
                <button class="form-button" >Log In</button>
                </div>

        </EditForm>

    </div>
            <p>Not Yet A Member?Click Here To <a href="register">Join Us.</a></p>
</div>


@code {
    private LoginRequestDTO user = new LoginRequestDTO();

    private async Task loginUser()
    {
        var res = await authInterface.Login(user);
        //Console.WriteLine(res.Token);

        if (!string.IsNullOrWhiteSpace(res.Token))
        {
            await localStorage.SetItemAsStringAsync("authToken", res.Token);
            await authProvider.GetAuthenticationStateAsync();
            _navigate.NavigateTo("/browse-items");
        }


    }
   
}